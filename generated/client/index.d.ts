// Code generated by Prisma (prisma@1.26.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  testing: (where?: TestingWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  testing: (where: TestingWhereUniqueInput) => TestingPromise;
  testings: (args?: {
    where?: TestingWhereInput;
    orderBy?: TestingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Testing>;
  testingsConnection: (args?: {
    where?: TestingWhereInput;
    orderBy?: TestingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TestingConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createTesting: (data: TestingCreateInput) => TestingPromise;
  updateTesting: (args: {
    data: TestingUpdateInput;
    where: TestingWhereUniqueInput;
  }) => TestingPromise;
  updateManyTestings: (args: {
    data: TestingUpdateManyMutationInput;
    where?: TestingWhereInput;
  }) => BatchPayloadPromise;
  upsertTesting: (args: {
    where: TestingWhereUniqueInput;
    create: TestingCreateInput;
    update: TestingUpdateInput;
  }) => TestingPromise;
  deleteTesting: (where: TestingWhereUniqueInput) => TestingPromise;
  deleteManyTestings: (where?: TestingWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  testing: (
    where?: TestingSubscriptionWhereInput
  ) => TestingSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TestingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "test_ASC"
  | "test_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TestingCreateInput {
  name?: String;
  test?: String;
}

export interface TestingUpdateInput {
  name?: String;
  test?: String;
}

export interface TestingUpdateManyMutationInput {
  name?: String;
  test?: String;
}

export interface TestingWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  test?: String;
  test_not?: String;
  test_in?: String[] | String;
  test_not_in?: String[] | String;
  test_lt?: String;
  test_lte?: String;
  test_gt?: String;
  test_gte?: String;
  test_contains?: String;
  test_not_contains?: String;
  test_starts_with?: String;
  test_not_starts_with?: String;
  test_ends_with?: String;
  test_not_ends_with?: String;
  AND?: TestingWhereInput[] | TestingWhereInput;
  OR?: TestingWhereInput[] | TestingWhereInput;
  NOT?: TestingWhereInput[] | TestingWhereInput;
}

export interface TestingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TestingWhereInput;
  AND?: TestingSubscriptionWhereInput[] | TestingSubscriptionWhereInput;
  OR?: TestingSubscriptionWhereInput[] | TestingSubscriptionWhereInput;
  NOT?: TestingSubscriptionWhereInput[] | TestingSubscriptionWhereInput;
}

export type TestingWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateTesting {
  count: Int;
}

export interface AggregateTestingPromise
  extends Promise<AggregateTesting>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTestingSubscription
  extends Promise<AsyncIterator<AggregateTesting>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TestingPreviousValues {
  id: ID_Output;
  name?: String;
  test?: String;
}

export interface TestingPreviousValuesPromise
  extends Promise<TestingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  test: () => Promise<String>;
}

export interface TestingPreviousValuesSubscription
  extends Promise<AsyncIterator<TestingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  test: () => Promise<AsyncIterator<String>>;
}

export interface TestingEdge {
  node: Testing;
  cursor: String;
}

export interface TestingEdgePromise extends Promise<TestingEdge>, Fragmentable {
  node: <T = TestingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TestingEdgeSubscription
  extends Promise<AsyncIterator<TestingEdge>>,
    Fragmentable {
  node: <T = TestingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TestingSubscriptionPayload {
  mutation: MutationType;
  node: Testing;
  updatedFields: String[];
  previousValues: TestingPreviousValues;
}

export interface TestingSubscriptionPayloadPromise
  extends Promise<TestingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TestingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TestingPreviousValuesPromise>() => T;
}

export interface TestingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TestingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TestingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TestingPreviousValuesSubscription>() => T;
}

export interface Testing {
  id: ID_Output;
  name?: String;
  test?: String;
}

export interface TestingPromise extends Promise<Testing>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  test: () => Promise<String>;
}

export interface TestingSubscription
  extends Promise<AsyncIterator<Testing>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  test: () => Promise<AsyncIterator<String>>;
}

export interface TestingConnection {
  pageInfo: PageInfo;
  edges: TestingEdge[];
}

export interface TestingConnectionPromise
  extends Promise<TestingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TestingEdge>>() => T;
  aggregate: <T = AggregateTestingPromise>() => T;
}

export interface TestingConnectionSubscription
  extends Promise<AsyncIterator<TestingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TestingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTestingSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Testing",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
